generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id            String         @id @default(cuid())
  firstName     String
  lastName      String
  email         String         @unique
  phone         String?
  dateOfBirth   DateTime?
  isTruckDriver Boolean        @default(true)
  dotNumber     String?
  cdlNumber     String?
  healthGoals   Json?
  medications   Json?
  conditions    Json?
  allergies     Json?
  status        String         @default("active")
  lastVisit     DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  gender        String?
  assessments      Assessment[]
  statuses         ClientStatus[]
  documents        Document[]
  notes            Note[]
  protocols        Protocol[]
  medicalDocuments MedicalDocument[]
}

model Document {
  id               String             @id @default(cuid())
  clientId         String
  fileName         String
  fileType         String
  fileSize         Int
  fileUrl          String
  processingError  String?
  extractedText    String?
  ocrConfidence    Float?
  aiAnalysis       Json?
  analysisDate     DateTime?
  uploadedAt       DateTime           @default(now())
  processedAt      DateTime?
  structuredData   Json?
  documentType     DocumentType       @default(UNKNOWN)
  labType          LabType?
  analysisStatus   AnalysisStatus     @default(PENDING)
  containsPHI      Boolean            @default(false)
  encryptionKey    String?
  isEncrypted      Boolean            @default(true)
  lastAccessedAt   DateTime?
  metadata         Json?
  ocrProvider      String?
  originalFileName String?
  phiTypes         Json?
  priority         Int                @default(5)
  storageKey       String?
  storageProvider  StorageProvider    @default(LOCAL)
  tags             String[]
  status           ProcessingStatus   @default(UPLOADED)
  client           Client             @relation(fields: [clientId], references: [id])
  DocumentAnalysis DocumentAnalysis[]
  LabValue         LabValue[]
  ProcessingJob    ProcessingJob[]

  @@index([clientId])
  @@index([status])
  @@index([documentType])
  @@index([priority])
  @@index([uploadedAt])
}

model Assessment {
  id              String     @id @default(cuid())
  clientId        String
  assessmentType  String     @default("comprehensive")
  status          String     @default("in_progress")
  responses       Json
  symptomBurden   Json?
  rootCauses      Json?
  aiAnalysis      Json?
  recommendations Json?
  startedAt       DateTime   @default(now())
  completedAt     DateTime?
  client          Client     @relation(fields: [clientId], references: [id])
  protocols       Protocol[]

  @@index([clientId])
  @@index([status])
}

model Protocol {
  id           String      @id @default(cuid())
  clientId     String
  assessmentId String?
  protocolName String
  status       String      @default("active")
  supplements  Json
  dietary      Json
  lifestyle    Json
  timeline     Json
  metrics      Json?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  completedAt  DateTime?
  assessment   Assessment? @relation(fields: [assessmentId], references: [id])
  client       Client      @relation(fields: [clientId], references: [id])

  @@index([clientId])
  @@index([status])
}

model Note {
  id                  String   @id @default(cuid())
  clientId            String
  noteType            NoteType
  title               String?
  chiefComplaints     String?
  healthHistory       String?
  currentMedications  String?
  goals               String?
  protocolAdjustments String?
  complianceNotes     String?
  progressMetrics     String?
  nextSteps           String?
  generalNotes        String?
  isImportant         Boolean  @default(false)
  followUpNeeded      Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  client              Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId, noteType])
  @@index([createdAt])
}

model ClientStatus {
  id        String     @id @default(cuid())
  clientId  String
  status    StatusType
  notes     String?
  createdAt DateTime   @default(now())
  createdBy String?
  client    Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId, createdAt])
  @@index([status])
}

model AuditLog {
  id            String        @id
  userId        String?
  userEmail     String?
  ipAddress     String?
  userAgent     String?
  resourceId    String?
  timestamp     DateTime      @default(now())
  endpoint      String?
  method        String?
  clientId      String?
  metadata      Json?
  changes       Json?
  dataAccessed  String[]
  details       Json?
  duration      Int?
  errorMessage  String?
  hipaaRelevant Boolean       @default(true)
  purpose       String?
  requestId     String?
  sessionId     String?
  statusCode    Int?
  success       Boolean
  userRole      String?
  action        AuditAction
  resource      AuditResource

  @@index([action, resource])
  @@index([clientId, timestamp])
  @@index([hipaaRelevant])
  @@index([timestamp])
  @@index([userId, timestamp])
}

model DocumentAnalysis {
  id               String         @id
  documentId       String
  clientId         String
  analysisType     AnalysisType
  patterns         Json?
  findings         Json?
  criticalValues   Json?
  trends           Json?
  systemAssessment Json?
  rootCauses       Json?
  recommendations  Json?
  confidence       Float?
  modelVersion     String?
  processingTime   Int?
  status           AnalysisStatus @default(PENDING)
  errorMessage     String?
  createdAt        DateTime       @default(now())
  completedAt      DateTime?
  reviewedAt       DateTime?
  reviewedBy       String?
  approvedAt       DateTime?
  approvedBy       String?
  cost             Float?
  insights         Json?
  interactions     Json?
  limitations      String[]
  provider         String         @default("CLAUDE")
  reliability      String?
  reviewRequired   Boolean        @default(false)
  tokens           Int?
  updatedAt        DateTime
  Document         Document       @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([analysisType])
  @@index([clientId])
  @@index([createdAt])
  @@index([documentId])
  @@index([status])
}

model LabValue {
  id               String      @id
  documentId       String
  clientId         String
  testName         String
  testCode         String?
  category         LabCategory
  subcategory      String?
  value            String
  numericValue     Float?
  unit             String?
  conventionalLow  Float?
  conventionalHigh Float?
  functionalLow    Float?
  functionalHigh   Float?
  flag             String?
  isOutOfRange     Boolean     @default(false)
  isCritical       Boolean     @default(false)
  severity         Severity    @default(NORMAL)
  collectionDate   DateTime?
  labName          String?
  verifiedAt       DateTime?
  verifiedBy       String?
  confidence       Float?
  createdAt        DateTime    @default(now())
  extractionMethod String?
  labLocation      String?
  panel            String?
  referenceRange   Json?
  reportDate       DateTime?
  updatedAt        DateTime
  verified         Boolean     @default(false)
  Document         Document    @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([category])
  @@index([clientId, testName])
  @@index([collectionDate])
  @@index([documentId])
  @@index([isCritical])
}

model ProcessingJob {
  id             String    @id
  documentId     String
  jobType        JobType
  priority       Int       @default(5)
  config         Json?
  queueName      String    @default("default")
  jobId          String?
  status         JobStatus @default(PENDING)
  progress       Int       @default(0)
  currentStep    String?
  attempts       Int       @default(0)
  maxAttempts    Int       @default(3)
  backoffDelay   Int       @default(5000)
  result         Json?
  error          Json?
  logs           Json[]
  scheduledAt    DateTime  @default(now())
  startedAt      DateTime?
  completedAt    DateTime?
  failedAt       DateTime?
  processingNode String?
  memoryUsage    Int?
  cpuTime        Int?
  Document       Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId, status])
  @@index([jobType])
  @@index([scheduledAt])
  @@index([status, priority])
}

model SystemMetrics {
  id                    String   @id
  cpuUsage              Float?
  memoryUsage           Float?
  diskUsage             Float?
  queueLength           Int      @default(0)
  activeJobs            Int      @default(0)
  completedJobs         Int      @default(0)
  failedJobs            Int      @default(0)
  averageProcessingTime Float?
  throughputPerHour     Int      @default(0)
  errorRate             Float    @default(0)
  requestCount          Int      @default(0)
  averageResponseTime   Float?
  documentsStored       Int      @default(0)
  storageUsed           BigInt   @default(0)
  timestamp             DateTime @default(now())
  intervalType          String   @default("hourly")

  @@index([timestamp, intervalType])
}

enum NoteType {
  INTERVIEW
  COACHING
}

enum StatusType {
  SIGNED_UP
  INITIAL_INTERVIEW_COMPLETED
  ASSESSMENT_COMPLETED
  DOCS_UPLOADED
  SCHEDULED
  ONGOING
  ARCHIVED
}

enum AnalysisStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  REQUIRES_REVIEW
  APPROVED
}

enum AnalysisType {
  FUNCTIONAL_MEDICINE
  CONVENTIONAL_INTERPRETATION
  TREND_ANALYSIS
  COMPARATIVE_ANALYSIS
  PATTERN_RECOGNITION
  NUTRIENT_ANALYSIS
  TOXICITY_ANALYSIS
  HORMONE_ANALYSIS
}

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  UPLOAD
  DOWNLOAD
  PROCESS
  ANALYZE
  EXPORT
  SHARE
  LOGIN
  LOGOUT
  ACCESS_DENIED
}

enum AuditResource {
  USER
  CLIENT
  DOCUMENT
  LAB_VALUE
  ANALYSIS
  ASSESSMENT
  PROTOCOL
  NOTE
  SYSTEM
}

enum DocumentType {
  LAB_REPORT
  IMAGING_REPORT
  CLINICAL_NOTES
  PATHOLOGY_REPORT
  ASSESSMENT_FORM
  PRESCRIPTION
  UNKNOWN
  INSURANCE_CARD
  INTAKE_FORM
}

enum JobStatus {
  PENDING
  ACTIVE
  COMPLETED
  FAILED
  DELAYED
  CANCELLED
  STUCK
}

enum JobType {
  OCR_EXTRACTION
  DATA_PARSING
  VALUE_EXTRACTION
  FUNCTIONAL_ANALYSIS
  PATTERN_ANALYSIS
  TREND_ANALYSIS
  REPORT_GENERATION
  NOTIFICATION
}

enum LabCategory {
  BASIC_METABOLIC
  COMPREHENSIVE_METABOLIC
  LIPID_PANEL
  THYROID
  HORMONE
  VITAMIN_MINERAL
  INFLAMMATORY_MARKERS
  IMMUNE_FUNCTION
  DIGESTIVE_HEALTH
  DETOXIFICATION
  CARDIOVASCULAR
  NEUROLOGICAL
  OTHER
  GENETIC
  MICRONUTRIENT
  FOOD_SENSITIVITY
  HEAVY_METALS
  ORGANIC_ACIDS
  AMINO_ACIDS
  FATTY_ACIDS
}

enum LabType {
  NUTRIQ
  LABCORP
  QUEST
  DUTCH
  KBMO
  GENOVA
  DIAGNOSTIC_SOLUTIONS
  GREAT_PLAINS
  OTHER
  VIBRANT_WELLNESS
  PRECISION_POINT
}

enum ProcessingStatus {
  UPLOADED
  QUEUED
  PROCESSING
  OCR_COMPLETE
  EXTRACTION_COMPLETE
  ANALYSIS_COMPLETE
  COMPLETED
  FAILED
  ARCHIVED
}

enum Severity {
  CRITICAL
  HIGH
  MODERATE
  LOW
  NORMAL
}

enum StorageProvider {
  LOCAL
  S3
  CLOUDINARY
}

// ====== MEDICAL DOCUMENT PROCESSING SYSTEM ======
// New models for advanced medical document processing (separate from existing Document system)

model MedicalDocument {
  id               String               @id @default(cuid())
  clientId         String?              @map("client_id")
  documentType     String               @map("document_type")
  originalFileName String               @map("original_file_name")
  s3Url           String?              @map("s3_url")
  s3Key           String?              @map("s3_key")
  uploadDate      DateTime             @default(now()) @map("upload_date")
  status          MedicalDocStatus     @default(PENDING)
  ocrText         String?              @db.Text @map("ocr_text")
  ocrConfidence   Float?               @map("ocr_confidence")
  processedAt     DateTime?            @map("processed_at")
  errorMessage    String?              @map("error_message")
  metadata        Json?
  
  labValues       MedicalLabValue[]
  analysis        MedicalDocAnalysis?
  
  // Links to your existing Client model
  client          Client?              @relation(fields: [clientId], references: [id])
  
  @@index([clientId, uploadDate])
  @@index([status])
  @@map("medical_documents")
}

model MedicalLabValue {
  id                String          @id @default(cuid())
  documentId        String          @map("document_id")
  testName          String          @map("test_name")
  standardName      String?         @map("standard_name") // LOINC code or standard mapping
  value             Float?
  valueText         String?         @map("value_text") // For non-numeric results
  unit              String?
  referenceMin      Float?          @map("reference_min")
  referenceMax      Float?          @map("reference_max")
  functionalMin     Float?          @map("functional_min") // IFM/Kresser ranges
  functionalMax     Float?          @map("functional_max")
  optimalMin        Float?          @map("optimal_min")
  optimalMax        Float?          @map("optimal_max")
  flag              String?         // normal, high, low, critical
  collectionDate    DateTime?       @map("collection_date")
  labSource         String?         @map("lab_source") // LabCorp, Quest, etc.
  confidence        Float?          @default(1.0)
  
  document          MedicalDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@index([documentId])
  @@index([testName])
  @@index([standardName])
  @@map("medical_lab_values")
}

model MedicalDocAnalysis {
  id               String          @id @default(cuid())
  documentId       String          @unique @map("document_id")
  patterns         Json            // Detected patterns with confidence scores
  rootCauses       Json?           @map("root_causes")
  criticalValues   Json?           @map("critical_values")
  functionalStatus Json?           @map("functional_status")
  crossReferences  Json?           @map("cross_references")
  trends           Json?
  recommendations  Json?
  createdAt        DateTime        @default(now()) @map("created_at")
  
  document         MedicalDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@map("medical_document_analyses")
}

model MedicalProcessingQueue {
  id            String              @id @default(cuid())
  documentId    String              @map("document_id")
  jobType       String              @map("job_type") // ocr, extraction, analysis
  priority      Int                 @default(0)
  status        MedicalJobStatus    @default(QUEUED)
  attempts      Int                 @default(0)
  maxAttempts   Int                 @default(3) @map("max_attempts")
  errorMessage  String?             @map("error_message")
  startedAt     DateTime?           @map("started_at")
  completedAt   DateTime?           @map("completed_at")
  createdAt     DateTime            @default(now()) @map("created_at")
  
  @@index([status, priority])
  @@map("medical_processing_queue")
}

// New enums with unique names to avoid any conflicts
enum MedicalDocStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REQUIRES_REVIEW
}

enum MedicalJobStatus {
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
  RETRY
}
