generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuditLog {
  id            String        @id
  userId        String?
  userEmail     String?
  ipAddress     String?
  userAgent     String?
  resourceId    String?
  timestamp     DateTime      @default(now())
  endpoint      String?
  method        String?
  clientId      String?
  metadata      Json?
  changes       Json?
  dataAccessed  String[]
  details       Json?
  duration      Int?
  errorMessage  String?
  hipaaRelevant Boolean       @default(true)
  purpose       String?
  requestId     String?
  sessionId     String?
  statusCode    Int?
  success       Boolean
  userRole      String?
  action        AuditAction
  resource      AuditResource

  @@index([action, resource])
  @@index([clientId, timestamp])
  @@index([hipaaRelevant])
  @@index([timestamp])
  @@index([userId, timestamp])
}

model Client {
  id                           String                         @id
  firstName                    String
  lastName                     String
  email                        String                         @unique
  phone                        String?
  dateOfBirth                  DateTime?
  isTruckDriver                Boolean                        @default(true)
  dotNumber                    String?
  cdlNumber                    String?
  healthGoals                  Json?
  medications                  Json?
  conditions                   Json?
  allergies                    Json?
  status                       String                         @default("active")
  lastVisit                    DateTime?
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime
  gender                       String?
  emailVerificationToken       String?
  emailVerified                Boolean                        @default(false)
  lastLoginAt                  DateTime?
  password                     String?
  rememberToken                String?
  ClientAnalysis               ClientAnalysis[]
  ClientStatus                 ClientStatus[]
  EnhancedProtocol             EnhancedProtocol[]
  Note                         Note[]
  Protocol                     Protocol[]
  ProtocolGeneration           ProtocolGeneration[]
  ProtocolProgress             ProtocolProgress[]
  TimelineExport               TimelineExport[]
  
  // Claude Analysis System Relations
  analyses        Analysis[]
  protocolPhases  ProtocolPhase[]
  supplements     Supplement[]
  protocolHistory ProtocolHistory[]
}

model ClientAnalysis {
  id                      String             @id
  clientId                String
  analysisDate            DateTime           @default(now())
  analysisVersion         String             @default("v1.0")
  executiveSummary        String?
  systemAnalysis          Json?
  rootCauseAnalysis       String?
  protocolRecommendations Json?
  monitoringPlan          String?
  patientEducation        String?
  fullAnalysis            String
  practitionerNotes       String?
  status                  String             @default("active")
  createdBy               String?
  createdAt               DateTime           @default(now())
  updatedAt               DateTime
  Client                  Client             @relation(fields: [clientId], references: [id])
  EnhancedProtocol        EnhancedProtocol[]

  @@index([clientId, analysisDate])
  @@index([status])
}

model ClientStatus {
  id        String     @id
  clientId  String
  status    StatusType
  notes     String?
  createdAt DateTime   @default(now())
  createdBy String?
  Client    Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId, createdAt])
  @@index([status])
}

model DailyScheduleTemplate {
  id            String   @id
  name          String
  scheduleTimes Json
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())

  @@index([isDefault])
}

model EnhancedProtocol {
  id                     String                  @id
  clientId               String
  analysisId             String?
  protocolName           String
  protocolPhase          String?
  supplements            Json?
  dietaryGuidelines      Json?
  lifestyleModifications Json?
  monitoringRequirements Json?
  startDate              DateTime?
  durationWeeks          Int?
  status                 String                  @default("planned")
  complianceNotes        String?
  effectivenessRating    Int?
  sideEffects            String?
  modificationsMade      Json?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime
  brandingConfig         Json?
  clinicalFocus          String?
  currentStatus          String?
  dailySchedule          Json?
  greeting               String?
  prioritySupplements    Json?
  protocolNotes          String?
  ClientAnalysis         ClientAnalysis?         @relation(fields: [analysisId], references: [id])
  Client                 Client                  @relation(fields: [clientId], references: [id])
  ProtocolGeneration     ProtocolGeneration[]
  ProtocolProgress       ProtocolProgress[]
  ProtocolStatusChanges  ProtocolStatusChanges[]
  ProtocolSupplement     ProtocolSupplement[]

  @@index([analysisId])
  @@index([clientId, status])
}

model Note {
  id                  String   @id
  clientId            String
  noteType            NoteType
  title               String?
  chiefComplaints     String?
  healthHistory       String?
  currentMedications  String?
  goals               String?
  protocolAdjustments String?
  complianceNotes     String?
  progressMetrics     String?
  nextSteps           String?
  generalNotes        String?
  isImportant         Boolean  @default(false)
  followUpNeeded      Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime
  Client              Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId, noteType])
  @@index([createdAt])
}

model Protocol {
  id           String    @id
  clientId     String
  protocolName String
  status       String    @default("active")
  supplements  Json
  dietary      Json
  lifestyle    Json
  timeline     Json
  metrics      Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  completedAt  DateTime?
  Client       Client    @relation(fields: [clientId], references: [id])

  @@index([clientId])
  @@index([status])
}

model ProtocolGeneration {
  id               String           @id
  protocolId       String
  clientId         String
  pdfUrl           String?
  emailSentAt      DateTime?
  emailRecipients  String[]
  generationData   Json?
  createdAt        DateTime         @default(now())
  Client           Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  EnhancedProtocol EnhancedProtocol @relation(fields: [protocolId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([createdAt])
  @@index([protocolId])
}

model ProtocolProgress {
  id                   String           @id
  protocolId           String
  clientId             String
  energyLevel          Int?             @db.SmallInt
  sleepQuality         Int?             @db.SmallInt
  digestionHealth      Int?             @db.SmallInt
  overallWellbeing     Int?             @db.SmallInt
  supplementCompliance Int?             @db.SmallInt
  dietaryCompliance    Int?             @db.SmallInt
  lifestyleCompliance  Int?             @db.SmallInt
  symptomsNotes        String?
  challengesFaced      String?
  positiveChanges      String?
  questionsConcerns    String?
  weekNumber           Int
  trackingDate         DateTime         @default(now())
  submittedBy          String
  createdAt            DateTime         @default(now())
  updatedAt            DateTime
  Client               Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  EnhancedProtocol     EnhancedProtocol @relation(fields: [protocolId], references: [id], onDelete: Cascade)

  @@unique([protocolId, weekNumber])
  @@index([clientId])
  @@index([protocolId])
  @@index([trackingDate])
  @@index([weekNumber])
}

model ProtocolStatusChanges {
  id               String           @id
  protocolId       String
  previousStatus   String?
  newStatus        String
  reasonForChange  String?
  adjustmentNotes  String?
  changedBy        String
  changedAt        DateTime         @default(now())
  EnhancedProtocol EnhancedProtocol @relation(fields: [protocolId], references: [id], onDelete: Cascade)

  @@index([changedAt])
  @@index([changedBy])
  @@index([protocolId])
}

model ProtocolSupplement {
  id               String           @id
  protocolId       String
  productName      String
  dosage           String
  timing           String
  purpose          String?
  priority         Int              @default(1)
  isActive         Boolean          @default(true)
  startDate        DateTime?
  endDate          DateTime?
  createdAt        DateTime         @default(now())
  EnhancedProtocol EnhancedProtocol @relation(fields: [protocolId], references: [id], onDelete: Cascade)

  @@index([priority, isActive])
  @@index([protocolId])
  @@index([startDate, endDate])
}

model ProtocolTemplate {
  id           String   @id
  name         String
  category     String
  templateData Json
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime

  @@index([category, isActive])
  @@index([isActive])
}

model SystemMetrics {
  id                    String   @id
  cpuUsage              Float?
  memoryUsage           Float?
  diskUsage             Float?
  queueLength           Int      @default(0)
  activeJobs            Int      @default(0)
  completedJobs         Int      @default(0)
  failedJobs            Int      @default(0)
  averageProcessingTime Float?
  throughputPerHour     Int      @default(0)
  errorRate             Float    @default(0)
  requestCount          Int      @default(0)
  averageResponseTime   Float?
  documentsStored       Int      @default(0)
  storageUsed           BigInt   @default(0)
  timestamp             DateTime @default(now())
  intervalType          String   @default("hourly")

  @@index([timestamp, intervalType])
}

model TimelineExport {
  id                     String       @id
  clientId               String
  exportType             TimelineType @default(COMPREHENSIVE)
  status                 ExportStatus @default(PENDING)
  timelineData           Json?
  criticalFindings       Json?
  exportedAt             DateTime?
  markdownContent        String?
  fileUrl                String?
  fileName               String?
  dateRange              Json?
  dataPoints             Int          @default(0)
  analysisVersion        String       @default("v1.0")
  requestedBy            String?
  processingTime         Int?
  errorMessage           String?
  hipaaRelevant          Boolean      @default(true)
  createdAt              DateTime     @default(now())
  updatedAt              DateTime
  labAnalysisData        Json?
  assessmentAnalysisData Json?
  Client                 Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId, exportType])
  @@index([createdAt])
  @@index([requestedBy])
  @@index([status])
}

model User {
  id            String    @id
  email         String    @unique
  name          String
  password      String
  role          String    @default("admin")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  lastLoginAt   DateTime?
  rememberToken String?
}

// Claude Analysis System Models
model Analysis {
  id            String   @id @default(cuid())
  clientId      String
  analysisData  Json     // Full Claude analysis JSON
  rootCauses    String[] // Extracted root causes
  riskFactors   String[] // Identified risk factors  
  priorityAreas String[] // Priority intervention areas
  confidence    Float    // Analysis confidence score (0-1)
  analysisDate  DateTime @default(now())
  version       String   @default("1.0")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  client          Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  protocolPhases  ProtocolPhase[]
  supplements     Supplement[]
  protocolHistory ProtocolHistory[]

  @@map("analyses")
}

model ProtocolPhase {
  id          String   @id @default(cuid())
  analysisId  String
  clientId    String
  phase       String   // PHASE1, PHASE2, PHASE3
  name        String
  description String?
  duration    String   // "30 days", "90 days", etc.
  supplements Json[]   // Array of supplement objects
  lifestyle   Json[]   // Array of lifestyle interventions
  dietary     Json[]   // Array of dietary recommendations
  monitoring  Json[]   // Array of monitoring requirements
  status      ProtocolPhaseStatus @default(PLANNED)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  analysis Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  client   Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("protocol_phases")
}

model Supplement {
  id            String   @id @default(cuid())
  clientId      String
  analysisId    String?
  name          String
  dosage        String
  timing        String
  duration      String
  priority      SupplementPriority @default(MEDIUM)
  category      String   // "Foundational", "Targeted", "Optimization"
  productUrl    String?
  estimatedCost Float    @default(0)
  rationale     String?
  phase         String   // PHASE1, PHASE2, PHASE3
  status        SupplementStatus @default(RECOMMENDED)
  startDate     DateTime?
  endDate       DateTime?
  compliance    Int?     // 0-100 percentage
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  client   Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  analysis Analysis? @relation(fields: [analysisId], references: [id], onDelete: SetNull)

  @@map("supplements")
}

model ProtocolHistory {
  id         String   @id @default(cuid())
  clientId   String
  analysisId String?
  action     String   // ANALYSIS_IMPORTED, PHASE_STARTED, PHASE_COMPLETED, etc.
  details    Json?    // Additional action details
  timestamp  DateTime @default(now())

  // Relations
  client   Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  analysis Analysis? @relation(fields: [analysisId], references: [id], onDelete: SetNull)

  @@map("protocol_history")
}

// Enums - Only keep the ones needed for remaining models
enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  UPLOAD
  DOWNLOAD
  PROCESS
  ANALYZE
  EXPORT
  SHARE
  LOGIN
  LOGOUT
  ACCESS_DENIED
}

enum AuditResource {
  USER
  CLIENT
  PROTOCOL
  NOTE
  SYSTEM
}

enum ExportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  EXPIRED
}

enum NoteType {
  INTERVIEW
  COACHING
}

enum StatusType {
  SIGNED_UP
  INITIAL_INTERVIEW_COMPLETED
  SCHEDULED
  ONGOING
  ARCHIVED
}

enum TimelineType {
  COMPREHENSIVE
  FOCUSED
  PROTOCOL_DEVELOPMENT
}

// Claude Analysis System Enums
enum ProtocolPhaseStatus {
  PLANNED
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

enum SupplementPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SupplementStatus {
  RECOMMENDED
  ACTIVE
  COMPLETED
  DISCONTINUED
  ON_HOLD
}
