import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/db";
import { auth } from "@/lib/auth-helpers";
import { getModuleQuestions } from "@/lib/assessment/questions";
import { FunctionalModule } from "@/lib/assessment/types";
import { AssessmentStatus } from "@prisma/client";

export async function POST(req: NextRequest) {
  try {
    // Get the authenticated user
    const session = await auth(req);
    if (!session?.user?.id) {
      return NextResponse.json(
        { success: false, error: "Unauthorized" },
        { status: 401 }
      );
    }

    console.log("Assessment start - session user ID:", session.user.id);

    // Check if user already has an active assessment
    const existingAssessment = await prisma.clientAssessment.findFirst({
      where: {
        clientId: session.user.id,
        status: "IN_PROGRESS",
      },
    });

    if (existingAssessment) {
      // Return existing assessment to resume
      const responses = await prisma.clientResponse.findMany({
        where: { assessmentId: existingAssessment.id },
        orderBy: { answeredAt: "desc" },
        take: 1,
      });

      const lastResponse = responses[0];
      const questions = getModuleQuestions('screening');

      // Find next question after last answered
      let nextQuestionIndex = 0;
      if (lastResponse) {
        const lastQuestionIndex = questions.findIndex(
          (q) => q.id === lastResponse.questionId
        );
        nextQuestionIndex = lastQuestionIndex + 1;
      }

      if (nextQuestionIndex < questions.length) {
        return NextResponse.json({
          success: true,
          data: {
            assessmentId: existingAssessment.id,
            firstQuestion: questions[nextQuestionIndex],
            module: existingAssessment.currentModule,
            isResuming: true,
          },
        });
      }
    }

    // Get the default assessment template
    let assessmentTemplate = await prisma.assessmentTemplate.findFirst({
      where: { isActive: true },
      orderBy: { createdAt: "desc" },
    });

    // If no template exists, create the default one
    if (!assessmentTemplate) {
      const allQuestions = getModuleQuestions('screening');

      assessmentTemplate = await prisma.assessmentTemplate.create({
        data: {
          name: "Comprehensive Functional Medicine Assessment",
          version: "1.0.0",
          questionBank: allQuestions,
          modules: {
            SCREENING: { order: 1, questions: allQuestions.length },
            ASSIMILATION: { order: 2, questions: 50 },
            DEFENSE_REPAIR: { order: 3, questions: 50 },
            ENERGY: { order: 4, questions: 50 },
            BIOTRANSFORMATION: { order: 5, questions: 50 },
            TRANSPORT: { order: 6, questions: 50 },
            COMMUNICATION: { order: 7, questions: 50 },
            STRUCTURAL: { order: 8, questions: 50 },
          },
          scoringRules: {
            severityThresholds: { low: 3, medium: 6, high: 8 },
            moduleWeights: {
              SCREENING: 1.5,
              ASSIMILATION: 1.0,
              DEFENSE_REPAIR: 1.2,
              ENERGY: 1.3,
              BIOTRANSFORMATION: 1.1,
              TRANSPORT: 1.0,
              COMMUNICATION: 1.2,
              STRUCTURAL: 0.9,
            },
          },
          isActive: true,
        },
      });
    }

    // Create new assessment for the client
    const newAssessment = await prisma.clientAssessment.create({
      data: {
        client: {
          connect: { id: session.user.id },
        },
        template: {
          connect: { id: assessmentTemplate.id },
        },
        currentModule: "SCREENING",
        questionsAsked: 1,
        questionsSaved: 0,
        status: "IN_PROGRESS",
        startedAt: new Date(),
        lastActiveAt: new Date(),
        aiContext: {
          modules: ["SCREENING"],
          primaryConcerns: [],
          riskFactors: [],
        },
        symptomProfile: {},
      },
    });

    // Get first question from screening module
    const questions = getModuleQuestions('screening');
    const firstQuestion = questions[0];
    
    // Ensure question type is properly serialized
    const formattedFirstQuestion = {
      ...firstQuestion,
      type: firstQuestion.type as string
    };

    // Log assessment start
    console.log(
      `Assessment ${newAssessment.id} started for client ${session.user.id}`
    );

    return NextResponse.json({
      success: true,
      data: {
        assessmentId: newAssessment.id,
        firstQuestion: formattedFirstQuestion,
        module: "SCREENING",
        questionsInModule: questions.length,
      },
    });
  } catch (error) {
    console.error("Error starting assessment:", error);
    return NextResponse.json(
      {
        success: false,
        error: "Failed to start assessment",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}
