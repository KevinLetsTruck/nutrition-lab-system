"use client";

import React, { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  MessageSquare,
  Target,
  Activity,
  Eye,
  AlertTriangle,
  Heart,
  Download,
  Copy,
} from "lucide-react";

interface CoachingNotes {
  keyHealthPriorities: string[];
  supplementRationale: string[];
  lifestyleRecommendations: string[];
  followUpMonitoring: string[];
  redFlagsToWatch: string[];
  motivationStrategies: string[];
}

interface CoachingNotesDisplayProps {
  clientId: string;
  clientName: string;
}

export function CoachingNotesDisplay({
  clientId,
  clientName,
}: CoachingNotesDisplayProps) {
  // Early return if missing required props
  if (!clientId || !clientName) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="text-red-600 flex items-center">
            <AlertTriangle className="w-5 h-5 mr-2" />
            Missing required props: clientId or clientName
          </div>
        </CardContent>
      </Card>
    );
  }
  const [coachingNotes, setCoachingNotes] = useState<CoachingNotes | null>(
    null
  );
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [copiedSection, setCopiedSection] = useState<string | null>(null);

  useEffect(() => {
    fetchCoachingNotes();
  }, [clientId]);

  const fetchCoachingNotes = async () => {
    try {
      const token = localStorage.getItem("token");
      const response = await fetch(`/api/clients/${clientId}/complete`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      if (!response.ok) {
        throw new Error("Failed to fetch client data");
      }

      const data = await response.json();
      const client = data.client;
      const healthGoals = client.healthGoals || {};
      const analysisHistory = healthGoals.analysisHistory || [];

      // Find the most recent analysis with coaching notes
      const latestAnalysisWithNotes = analysisHistory.find(
        (analysis: any) => analysis.analysisData?.coachingNotes
      );

      if (latestAnalysisWithNotes) {
        setCoachingNotes(latestAnalysisWithNotes.analysisData.coachingNotes);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "Unknown error");
    } finally {
      setLoading(false);
    }
  };

  const handleCopySection = async (sectionName: string, content: string[]) => {
    const text = `${sectionName}:\n${content
      .map((item) => `• ${item}`)
      .join("\n")}`;
    try {
      await navigator.clipboard.writeText(text);
      setCopiedSection(sectionName);
      setTimeout(() => setCopiedSection(null), 2000);
    } catch (err) {
      console.error("Failed to copy text:", err);
    }
  };

  const handleDownloadNotes = () => {
    if (!coachingNotes) return;

    const content = generateNotesContent();
    const blob = new Blob([content], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${clientName.replace(/\s+/g, "-")}-Coaching-Notes.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateNotesContent = () => {
    if (!coachingNotes) return "";

    const sections = [
      {
        title: "Key Health Priorities",
        items: coachingNotes.keyHealthPriorities,
      },
      {
        title: "Supplement Rationale",
        items: coachingNotes.supplementRationale,
      },
      {
        title: "Lifestyle Recommendations",
        items: coachingNotes.lifestyleRecommendations,
      },
      {
        title: "Follow-Up Monitoring",
        items: coachingNotes.followUpMonitoring,
      },
      { title: "Red Flags to Watch", items: coachingNotes.redFlagsToWatch },
      {
        title: "Motivation Strategies",
        items: coachingNotes.motivationStrategies,
      },
    ];

    return `
COACHING NOTES
Client: ${clientName}
Date: ${new Date().toLocaleDateString()}

${sections
  .map(
    (section) =>
      `${section.title.toUpperCase()}:\n${(section.items || [])
        .map((item) => `• ${item}`)
        .join("\n")}`
  )
  .join("\n\n")}

---
Generated by FNTP Nutrition System
    `.trim();
  };

  if (loading) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="flex items-center justify-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            <span className="ml-3">Loading coaching notes...</span>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="text-red-600 flex items-center">
            <AlertTriangle className="w-5 h-5 mr-2" />
            Error loading coaching notes: {error}
          </div>
        </CardContent>
      </Card>
    );
  }

  if (!coachingNotes) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="text-center py-8">
            <MessageSquare className="w-12 h-12 text-gray-400 mx-auto mb-3" />
            <p className="text-gray-600">No coaching notes found</p>
            <p className="text-sm text-gray-500">
              Import a Claude analysis to generate coaching notes
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  const sections = [
    {
      title: "Key Health Priorities",
      items: coachingNotes.keyHealthPriorities || [],
      icon: Target,
      color: "bg-red-50 border-red-200",
      badgeColor: "bg-red-100 text-red-800",
    },
    {
      title: "Supplement Rationale",
      items: coachingNotes.supplementRationale || [],
      icon: Activity,
      color: "bg-blue-50 border-blue-200",
      badgeColor: "bg-blue-100 text-blue-800",
    },
    {
      title: "Lifestyle Recommendations",
      items: coachingNotes.lifestyleRecommendations || [],
      icon: Heart,
      color: "bg-green-50 border-green-200",
      badgeColor: "bg-green-100 text-green-800",
    },
    {
      title: "Follow-Up Monitoring",
      items: coachingNotes.followUpMonitoring || [],
      icon: Eye,
      color: "bg-purple-50 border-purple-200",
      badgeColor: "bg-purple-100 text-purple-800",
    },
    {
      title: "Red Flags to Watch",
      items: coachingNotes.redFlagsToWatch || [],
      icon: AlertTriangle,
      color: "bg-yellow-50 border-yellow-200",
      badgeColor: "bg-yellow-100 text-yellow-800",
    },
    {
      title: "Motivation Strategies",
      items: coachingNotes.motivationStrategies || [],
      icon: MessageSquare,
      color: "bg-indigo-50 border-indigo-200",
      badgeColor: "bg-indigo-100 text-indigo-800",
    },
  ];

  return (
    <div className="space-y-4">
      {/* Header */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <MessageSquare className="w-5 h-5" />
              Coaching Notes for {clientName}
            </div>
            <Button
              variant="outline"
              size="sm"
              onClick={handleDownloadNotes}
              className="flex items-center gap-2"
            >
              <Download className="w-4 h-4" />
              Download Notes
            </Button>
          </CardTitle>
        </CardHeader>
      </Card>

      {/* Notes Sections */}
      <div className="grid gap-4">
        {sections.map((section, sectionIndex) => (
          <Card key={`${section.title}-${sectionIndex}`} className={`border-2 ${section.color}`}>
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center justify-between text-lg">
                <div className="flex items-center gap-2">
                  {React.createElement(section.icon, { className: "w-5 h-5" })}
                  {section.title}
                  <Badge className={section.badgeColor}>
                    {section.items.length}
                  </Badge>
                </div>
                {section.items.length > 0 && (
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() =>
                      handleCopySection(section.title, section.items)
                    }
                    className="h-8 px-2"
                  >
                    {copiedSection === section.title ? (
                      <span className="text-green-600 text-xs">Copied!</span>
                    ) : (
                      <Copy className="w-4 h-4" />
                    )}
                  </Button>
                )}
              </CardTitle>
            </CardHeader>
            <CardContent>
              {section.items.length === 0 ? (
                <p className="text-gray-500 italic">No items in this section</p>
              ) : (
                <ul className="space-y-2">
                  {section.items.map((item, index) => (
                    <li key={index} className="flex items-start gap-2">
                      <span className="text-gray-400 mt-1 text-sm">•</span>
                      <span className="text-gray-700 leading-relaxed">
                        {item}
                      </span>
                    </li>
                  ))}
                </ul>
              )}
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}
