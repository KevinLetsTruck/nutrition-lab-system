"use client";

import React, { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  FileText,
  Calendar,
  Target,
  Clock,
  AlertCircle,
  Download,
  Print,
} from "lucide-react";

interface ProtocolLetter {
  greeting: string;
  phaseInfo: string;
  duration: string;
  clinicalFocus: string;
  currentStatus: string;
  prioritySupplements: Array<{
    productName: string;
    dose: string;
    timing: string;
    purpose: string;
  }>;
  dailySchedule: {
    uponWaking?: string;
    beforeBreakfast?: string;
    betweenBreakfastLunch?: string;
    beforeLunch?: string;
    withLargestMeal?: string;
    betweenLunchDinner?: string;
  };
  protocolNotes: string;
}

interface ProtocolLetterDisplayProps {
  clientId: string;
  clientName: string;
}

export function ProtocolLetterDisplay({
  clientId,
  clientName,
}: ProtocolLetterDisplayProps) {
  // Early return if missing required props
  if (!clientId || !clientName) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="text-red-600 flex items-center">
            <AlertCircle className="w-5 h-5 mr-2" />
            Missing required props: clientId or clientName
          </div>
        </CardContent>
      </Card>
    );
  }
  const [protocolLetter, setProtocolLetter] = useState<ProtocolLetter | null>(
    null
  );
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetchProtocolLetter();
  }, [clientId]);

  const fetchProtocolLetter = async () => {
    try {
      const token = localStorage.getItem("token");
      const response = await fetch(`/api/clients/${clientId}/complete`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      if (!response.ok) {
        throw new Error("Failed to fetch client data");
      }

      const data = await response.json();
      const client = data.client;
      const healthGoals = client.healthGoals || {};
      const analysisHistory = healthGoals.analysisHistory || [];

      // Find the most recent analysis with a protocol letter
      const latestAnalysisWithProtocol = analysisHistory.find(
        (analysis: any) => analysis.analysisData?.protocolLetter
      );

      if (latestAnalysisWithProtocol) {
        setProtocolLetter(
          latestAnalysisWithProtocol.analysisData.protocolLetter
        );
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "Unknown error");
    } finally {
      setLoading(false);
    }
  };

  const handlePrint = () => {
    window.print();
  };

  const handleDownload = () => {
    if (!protocolLetter) return;

    const content = generateProtocolContent();
    const blob = new Blob([content], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${clientName.replace(/\s+/g, "-")}-Protocol-Letter.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateProtocolContent = () => {
    if (!protocolLetter) return "";

    return `
FUNCTIONAL NUTRITION PROTOCOL LETTER
Client: ${clientName}
Date: ${new Date().toLocaleDateString()}

${protocolLetter.greeting}

PHASE INFORMATION:
${protocolLetter.phaseInfo}
Duration: ${protocolLetter.duration}

CLINICAL FOCUS:
${protocolLetter.clinicalFocus}

CURRENT STATUS:
${protocolLetter.currentStatus}

PRIORITY SUPPLEMENTS:
${
  protocolLetter.prioritySupplements
    ?.map(
      (supp) =>
        `â€¢ ${supp.productName}: ${supp.dose} - ${supp.timing}\n  Purpose: ${supp.purpose}`
    )
    .join("\n\n") || "No specific supplements listed"
}

DAILY SCHEDULE:
${
  Object.entries(protocolLetter.dailySchedule || {})
    .map(
      ([time, instructions]) =>
        `${time
          .replace(/([A-Z])/g, " $1")
          .replace(/^./, (str) => str.toUpperCase())}: ${instructions}`
    )
    .join("\n") || "No specific schedule provided"
}

PROTOCOL NOTES:
${protocolLetter.protocolNotes}

---
Generated by FNTP Nutrition System
    `.trim();
  };

  if (loading) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="flex items-center justify-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            <span className="ml-3">Loading protocol letter...</span>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="text-red-600 flex items-center">
            <AlertCircle className="w-5 h-5 mr-2" />
            Error loading protocol letter: {error}
          </div>
        </CardContent>
      </Card>
    );
  }

  if (!protocolLetter) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="text-center py-8">
            <FileText className="w-12 h-12 text-gray-400 mx-auto mb-3" />
            <p className="text-gray-600">No protocol letter found</p>
            <p className="text-sm text-gray-500">
              Import a Claude analysis to generate a protocol letter
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-4">
      {/* Header */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <FileText className="w-5 h-5" />
              Protocol Letter for {clientName}
            </div>
            <div className="flex items-center gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={handleDownload}
                className="flex items-center gap-2"
              >
                <Download className="w-4 h-4" />
                Download
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={handlePrint}
                className="flex items-center gap-2"
              >
                <Print className="w-4 h-4" />
                Print
              </Button>
            </div>
          </CardTitle>
        </CardHeader>
      </Card>

      {/* Protocol Content */}
      <Card>
        <CardContent className="p-6 space-y-6">
          {/* Greeting */}
          <div>
            <p className="text-gray-700 leading-relaxed">
              {protocolLetter.greeting}
            </p>
          </div>

          {/* Phase Information */}
          <div className="bg-blue-50 p-4 rounded-lg">
            <h3 className="font-semibold text-blue-900 mb-2 flex items-center gap-2">
              <Target className="w-5 h-5" />
              {protocolLetter.phaseInfo}
            </h3>
            <div className="flex items-center gap-4 text-sm text-blue-800">
              <div className="flex items-center gap-1">
                <Calendar className="w-4 h-4" />
                <span>Duration: {protocolLetter.duration}</span>
              </div>
            </div>
          </div>

          {/* Clinical Focus */}
          <div>
            <h3 className="font-semibold text-gray-900 mb-3">Clinical Focus</h3>
            <p className="text-gray-700 leading-relaxed">
              {protocolLetter.clinicalFocus}
            </p>
          </div>

          {/* Current Status */}
          <div>
            <h3 className="font-semibold text-gray-900 mb-3">Current Status</h3>
            <p className="text-gray-700 leading-relaxed">
              {protocolLetter.currentStatus}
            </p>
          </div>

          {/* Priority Supplements */}
          {protocolLetter.prioritySupplements &&
            protocolLetter.prioritySupplements.length > 0 && (
              <div>
                <h3 className="font-semibold text-gray-900 mb-3">
                  Priority Supplements
                </h3>
                <div className="space-y-3">
                  {protocolLetter.prioritySupplements.map(
                    (supplement, index) => (
                      <div key={index} className="bg-gray-50 p-3 rounded-lg">
                        <div className="font-medium text-gray-900">
                          {supplement.productName}
                        </div>
                        <div className="text-sm text-gray-600 mt-1">
                          <span className="font-medium">Dose:</span>{" "}
                          {supplement.dose} |
                          <span className="font-medium"> Timing:</span>{" "}
                          {supplement.timing}
                        </div>
                        <div className="text-sm text-gray-700 mt-2">
                          {supplement.purpose}
                        </div>
                      </div>
                    )
                  )}
                </div>
              </div>
            )}

          {/* Daily Schedule */}
          {protocolLetter.dailySchedule &&
            Object.keys(protocolLetter.dailySchedule).length > 0 && (
              <div>
                <h3 className="font-semibold text-gray-900 mb-3 flex items-center gap-2">
                  <Clock className="w-5 h-5" />
                  Daily Schedule
                </h3>
                <div className="space-y-2">
                  {Object.entries(protocolLetter.dailySchedule).map(
                    ([timeKey, instructions]) => (
                      <div
                        key={timeKey}
                        className="flex gap-3 p-2 bg-gray-50 rounded"
                      >
                        <div className="font-medium text-gray-900 min-w-[140px]">
                          {timeKey
                            .replace(/([A-Z])/g, " $1")
                            .replace(/^./, (str) => str.toUpperCase())}
                          :
                        </div>
                        <div className="text-gray-700">{instructions}</div>
                      </div>
                    )
                  )}
                </div>
              </div>
            )}

          {/* Protocol Notes */}
          <div className="bg-yellow-50 p-4 rounded-lg">
            <h3 className="font-semibold text-yellow-900 mb-3 flex items-center gap-2">
              <AlertCircle className="w-5 h-5" />
              Important Protocol Notes
            </h3>
            <p className="text-yellow-800 leading-relaxed">
              {protocolLetter.protocolNotes}
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
