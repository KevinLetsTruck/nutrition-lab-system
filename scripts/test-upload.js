const fs = require('fs');
const path = require('path');

async function testUpload() {
  const testFile = path.join(__dirname, 'test-pdf.pdf');
  
  // Create a simple test PDF if it doesn't exist
  if (!fs.existsSync(testFile)) {
    console.log('Creating test PDF file...');
    // Create a minimal PDF content
    const pdfContent = Buffer.from([
      0x25, 0x50, 0x44, 0x46, 0x2D, 0x31, 0x2E, 0x34, 0x0A, 0x25, 0xC7, 0xEC, 0x8F, 0xA2, 0x0A,
      0x31, 0x20, 0x30, 0x20, 0x6F, 0x62, 0x6A, 0x0A, 0x3C, 0x3C, 0x2F, 0x54, 0x79, 0x70, 0x65,
      0x2F, 0x43, 0x61, 0x74, 0x61, 0x6C, 0x6F, 0x67, 0x2F, 0x50, 0x61, 0x67, 0x65, 0x73, 0x20,
      0x32, 0x20, 0x30, 0x20, 0x52, 0x3E, 0x3E, 0x0A, 0x65, 0x6E, 0x64, 0x6F, 0x62, 0x6A, 0x0A,
      0x32, 0x20, 0x30, 0x20, 0x6F, 0x62, 0x6A, 0x0A, 0x3C, 0x3C, 0x2F, 0x54, 0x79, 0x70, 0x65,
      0x2F, 0x50, 0x61, 0x67, 0x65, 0x73, 0x2F, 0x4B, 0x69, 0x64, 0x73, 0x5B, 0x33, 0x20, 0x30,
      0x20, 0x52, 0x5D, 0x2F, 0x43, 0x6F, 0x75, 0x6E, 0x74, 0x20, 0x31, 0x3E, 0x3E, 0x0A, 0x65,
      0x6E, 0x64, 0x6F, 0x62, 0x6A, 0x0A, 0x33, 0x20, 0x30, 0x20, 0x6F, 0x62, 0x6A, 0x0A, 0x3C,
      0x3C, 0x2F, 0x54, 0x79, 0x70, 0x65, 0x2F, 0x50, 0x61, 0x67, 0x65, 0x2F, 0x4D, 0x65, 0x64,
      0x69, 0x61, 0x42, 0x6F, 0x78, 0x5B, 0x30, 0x20, 0x30, 0x20, 0x36, 0x31, 0x32, 0x20, 0x37,
      0x39, 0x32, 0x5D, 0x2F, 0x50, 0x61, 0x72, 0x65, 0x6E, 0x74, 0x20, 0x32, 0x20, 0x30, 0x20,
      0x52, 0x2F, 0x52, 0x65, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x73, 0x3C, 0x3C, 0x2F, 0x46,
      0x6F, 0x6E, 0x74, 0x3C, 0x3C, 0x2F, 0x46, 0x31, 0x3C, 0x3C, 0x2F, 0x54, 0x79, 0x70, 0x65,
      0x2F, 0x46, 0x6F, 0x6E, 0x74, 0x2F, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x2F, 0x54,
      0x79, 0x70, 0x65, 0x31, 0x2F, 0x42, 0x61, 0x73, 0x65, 0x46, 0x6F, 0x6E, 0x74, 0x2F, 0x48,
      0x65, 0x6C, 0x76, 0x65, 0x74, 0x69, 0x63, 0x61, 0x3E, 0x3E, 0x3E, 0x3E, 0x2F, 0x43, 0x6F,
      0x6E, 0x74, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x34, 0x20, 0x30, 0x20, 0x52, 0x3E, 0x3E, 0x0A,
      0x65, 0x6E, 0x64, 0x6F, 0x62, 0x6A, 0x0A, 0x34, 0x20, 0x30, 0x20, 0x6F, 0x62, 0x6A, 0x0A,
      0x3C, 0x3C, 0x2F, 0x4C, 0x65, 0x6E, 0x67, 0x74, 0x68, 0x20, 0x31, 0x33, 0x3E, 0x3E, 0x0A,
      0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x0A, 0x42, 0x54, 0x0A, 0x35, 0x30, 0x20, 0x37, 0x30,
      0x30, 0x20, 0x54, 0x64, 0x0A, 0x28, 0x54, 0x65, 0x73, 0x74, 0x29, 0x20, 0x54, 0x6A, 0x0A,
      0x45, 0x54, 0x0A, 0x65, 0x6E, 0x64, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x0A, 0x65, 0x6E,
      0x64, 0x6F, 0x62, 0x6A, 0x0A, 0x78, 0x72, 0x65, 0x66, 0x0A, 0x30, 0x20, 0x35, 0x0A, 0x30,
      0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x36, 0x35, 0x35, 0x33, 0x35,
      0x20, 0x66, 0x20, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x30,
      0x30, 0x30, 0x30, 0x30, 0x20, 0x6E, 0x20, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
      0x30, 0x30, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6E, 0x20, 0x0A, 0x30, 0x30, 0x30,
      0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x30, 0x30,
      0x30, 0x30, 0x30, 0x20, 0x6E, 0x20, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
      0x30, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6E, 0x20, 0x0A, 0x74, 0x72, 0x61, 0x69,
      0x6C, 0x65, 0x72, 0x0A, 0x3C, 0x3C, 0x2F, 0x53, 0x69, 0x7A, 0x65, 0x20, 0x35, 0x2F, 0x52,
      0x6F, 0x6F, 0x74, 0x20, 0x31, 0x20, 0x30, 0x20,52, 0x3E, 0x3E, 0x0A, 0x73, 0x74, 0x61, 0x72,
      0x74, 0x78, 0x72, 0x65, 0x66, 0x0A, 0x32, 0x35, 0x30, 0x0A, 0x25, 0x25, 0x45, 0x4F, 0x46, 0x0A
    ]);
    fs.writeFileSync(testFile, pdfContent);
  }

  console.log('Testing upload API...');
  
  // Read file as buffer
  const fileBuffer = fs.readFileSync(testFile);
  
  // Create FormData manually
  const boundary = '----WebKitFormBoundary' + Math.random().toString(36).substring(2);
  const formData = [];
  
  // Add file
  formData.push(`--${boundary}`);
  formData.push('Content-Disposition: form-data; name="file"; filename="test-pdf.pdf"');
  formData.push('Content-Type: application/pdf');
  formData.push('');
  formData.push(fileBuffer.toString('binary'));
  
  // Add client info
  formData.push(`--${boundary}`);
  formData.push('Content-Disposition: form-data; name="clientEmail"');
  formData.push('');
  formData.push('test@example.com');
  
  formData.push(`--${boundary}`);
  formData.push('Content-Disposition: form-data; name="clientFirstName"');
  formData.push('');
  formData.push('Test');
  
  formData.push(`--${boundary}`);
  formData.push('Content-Disposition: form-data; name="clientLastName"');
  formData.push('');
  formData.push('User');
  
  formData.push(`--${boundary}--`);
  
  const body = formData.join('\r\n');

  try {
    const response = await fetch('http://localhost:3000/api/upload', {
      method: 'POST',
      headers: {
        'Content-Type': `multipart/form-data; boundary=${boundary}`,
        'Content-Length': Buffer.byteLength(body)
      },
      body: body
    });

    const result = await response.json();
    
    if (response.ok) {
      console.log('✅ Upload test successful!');
      console.log('Result:', JSON.stringify(result, null, 2));
    } else {
      console.log('❌ Upload test failed!');
      console.log('Status:', response.status);
      console.log('Error:', result);
    }
  } catch (error) {
    console.log('❌ Upload test error:', error.message);
  }
}

// Run the test
testUpload().catch(console.error); 