#!/usr/bin/env bash
set -euo pipefail

# setup-railway-db.sh
# Idiot-proof Railway PostgreSQL setup helper for local dev
# - Checks Railway CLI
# - Logs in (if needed)
# - Creates/links project (if needed)
# - Creates PostgreSQL service (if missing)
# - Retrieves connection strings
# - Writes/updates .env.local with pooled and direct URLs

INFO() { echo -e "\033[1;34m[INFO]\033[0m $*"; }
WARN() { echo -e "\033[1;33m[WARN]\033[0m $*"; }
ERR()  { echo -e "\033[1;31m[ERROR]\033[0m $*"; }

REQUIRED_CMDS=(jq)

command -v railway >/dev/null 2>&1 || {
  ERR "Railway CLI not found. Install with:"
  echo "  macOS:  brew install railway"
  echo "  Any OS: curl -fsSL https://railway.app/install.sh | sh"
  exit 1
}

for c in "${REQUIRED_CMDS[@]}"; do
  command -v "$c" >/dev/null 2>&1 || {
    ERR "$c is required. Install with: brew install $c (macOS) or your package manager"
    exit 1
  }

done

# Ensure we're at repo root
if [[ ! -f package.json ]]; then
  ERR "Run this script from the project root (where package.json lives)."
  exit 1
fi

INFO "Checking Railway auth..."
if ! railway whoami >/dev/null 2>&1; then
  INFO "Logging into Railway..."
  railway login || { ERR "Railway login failed"; exit 1; }
fi

# Ensure project is linked
if ! railway status >/dev/null 2>&1; then
  WARN "This directory is not linked to a Railway project."
  INFO "Running 'railway link'..."
  railway link || { ERR "Failed to link project"; exit 1; }
fi

INFO "Ensuring PostgreSQL service exists..."
PG_SERVICE_ID=$(railway service | awk '/postgres|PostgreSQL/ {print $1; exit}' || true)
if [[ -z "${PG_SERVICE_ID}" ]]; then
  INFO "Creating PostgreSQL service..."
  railway add --plugin postgresql || { ERR "Failed to create PostgreSQL service"; exit 1; }
  sleep 3
  PG_SERVICE_ID=$(railway service | awk '/postgres|PostgreSQL/ {print $1; exit}' || true)
fi

if [[ -z "${PG_SERVICE_ID}" ]]; then
  ERR "Could not locate PostgreSQL service after creation."
  exit 1
fi

INFO "Fetching PostgreSQL variables..."
# railway variables --json outputs env for the current service by default; switch to PG service explicitly
PG_VARS_JSON=$(railway variables --service "$PG_SERVICE_ID" --json | tail -n +1)

if [[ -z "$PG_VARS_JSON" ]]; then
  ERR "Failed to fetch PostgreSQL variables."
  exit 1
fi

PG_HOST=$(echo "$PG_VARS_JSON" | jq -r '.[] | select(.key=="PGHOST") | .value' || true)
PG_PORT=$(echo "$PG_VARS_JSON" | jq -r '.[] | select(.key=="PGPORT") | .value' || true)
PG_USER=$(echo "$PG_VARS_JSON" | jq -r '.[] | select(.key=="PGUSER") | .value' || true)
PG_PASS=$(echo "$PG_VARS_JSON" | jq -r '.[] | select(.key=="PGPASSWORD") | .value' || true)
PG_DB=$(echo "$PG_VARS_JSON" | jq -r '.[] | select(.key=="PGDATABASE") | .value' || true)
DATABASE_URL_BASE="postgresql://${PG_USER}:${PG_PASS}@${PG_HOST}:${PG_PORT}/${PG_DB}"

if [[ -z "$PG_HOST" || -z "$PG_PORT" || -z "$PG_USER" || -z "$PG_PASS" || -z "$PG_DB" ]]; then
  ERR "Missing one or more required PG variables (PGHOST/PGPORT/PGUSER/PGPASSWORD/PGDATABASE)."
  exit 1
fi

POOLED_SUFFIX='?sslmode=require&connection_limit=10&pool_timeout=30'
DIRECT_SUFFIX='?sslmode=require'

DATABASE_URL_POOLED="${DATABASE_URL_BASE}${POOLED_SUFFIX}"
DATABASE_URL_DIRECT="${DATABASE_URL_BASE}${DIRECT_SUFFIX}"

ENV_FILE=".env.local"
INFO "Writing ${ENV_FILE}..."
{
  echo "# Generated by scripts/setup-railway-db.sh on $(date)"
  echo "DATABASE_URL=${DATABASE_URL_POOLED}"
  echo "DIRECT_URL=${DATABASE_URL_DIRECT}"
  echo "DATABASE_URL_UNPOOLED=${DATABASE_URL_BASE}${DIRECT_SUFFIX}"
  echo "RAILWAY_POSTGRES_HOST=${PG_HOST}"
  echo "RAILWAY_POSTGRES_PORT=${PG_PORT}"
  echo "RAILWAY_POSTGRES_USER=${PG_USER}"
  echo "RAILWAY_POSTGRES_PASSWORD=${PG_PASS}"
  echo "RAILWAY_POSTGRES_DATABASE=${PG_DB}"
} > "$ENV_FILE"

INFO "Wrote ${ENV_FILE} with pooled and direct URLs."

INFO "Tip: Set these variables on the APP service in Railway for production:"
cat <<EOF
DATABASE_URL=${DATABASE_URL_POOLED}
DIRECT_URL=${DATABASE_URL_DIRECT}
DATABASE_URL_UNPOOLED=${DATABASE_URL_BASE}${DIRECT_SUFFIX}
EOF

INFO "Done. You can now run: npm run build && npm start (or push to trigger deploy)."
